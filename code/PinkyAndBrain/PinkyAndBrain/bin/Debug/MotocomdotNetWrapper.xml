<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MotocomdotNetWrapper</name>
    </assembly>
    <members>
        <member name="T:MotocomdotNetWrapper.CYasnac">
            <summary>
            Wrapper for DX100 Yasnac robot controller
            </summary>
        </member>
        <member name="M:MotocomdotNetWrapper.CYasnac.UpdateStatus(System.Int16@,System.Int16@)">
            <summary>
            Reads status of the controller
            </summary>
            <param name="d1"></param>
            <param name="d2"></param>
        </member>
        <member name="M:MotocomdotNetWrapper.CYasnac.GetJobList(System.Collections.ArrayList)">
            <summary>
            Retrieves joblist from controller
            </summary>
            <param name="JobList">ArrayList that will receive the jobs</param>
            <returns>Number of jobs in joblist</returns>
        </member>
        <member name="M:MotocomdotNetWrapper.CYasnac.DeleteJob(System.String)">
            <summary>
            Deletes a job on the controller
            </summary>
            <param name="JobName">Name of job to delete</param>
        </member>
        <member name="M:MotocomdotNetWrapper.CYasnac.GetAlarm(MotocomdotNetWrapper.CErrorData,System.Collections.ArrayList)">
            <summary>
            Retrieves alarm and error status of the controller
            </summary>
            <param name="error">Object to hold error information</param>
            <param name="alarmlist">ArrayList that holds objects with alarm information</param>
            <returns>Number of active alarms</returns>
        </member>
        <member name="M:MotocomdotNetWrapper.CYasnac.ResetAlarm">
            <summary>
            Resets an alarm
            </summary>
        </member>
        <member name="M:MotocomdotNetWrapper.CYasnac.SetTeachMode">
            <summary>
            Sets Teach mode
            </summary>
        </member>
        <member name="M:MotocomdotNetWrapper.CYasnac.SetPlayMode">
            <summary>
            Sets Play mode
            </summary>
        </member>
        <member name="M:MotocomdotNetWrapper.CYasnac.SetServoOn">
            <summary>
            Sets Servo ON
            </summary>
        </member>
        <member name="M:MotocomdotNetWrapper.CYasnac.SetServoOff">
            <summary>
            Sets Servo OFF
            </summary>
        </member>
        <member name="M:MotocomdotNetWrapper.CYasnac.SetHoldOn">
            <summary>
            Sets Hold ON
            </summary>
        </member>
        <member name="M:MotocomdotNetWrapper.CYasnac.SetHoldOff">
            <summary>
            Sets Hold OFF
            </summary>
        </member>
        <member name="M:MotocomdotNetWrapper.CYasnac.Start">
            <summary>
            Starts operation from the current line of current job
            </summary>
        </member>
        <member name="M:MotocomdotNetWrapper.CYasnac.ReadSimpleTypeVariable(MotocomdotNetWrapper.CSimpleTypeVarList)">
            <summary>
            Reads multiple variables of simple data type
            </summary>
            <param name="SimpleVar"></param>
        </member>
        <member name="M:MotocomdotNetWrapper.CYasnac.ReadPositionVariable(System.Int16,MotocomdotNetWrapper.CRobPosVar)">
            <summary>
            Reads position variable
            </summary>
            <param name="Index">Index of variable to read</param>
            <param name="PosVar">Object receiving results</param>
        </member>
        <member name="M:MotocomdotNetWrapper.CYasnac.WritePositionVariable(System.Int16,MotocomdotNetWrapper.CRobPosVar)">
            <summary>
            Writes position variable
            </summary>
            <param name="Index">Index of variable to write</param>
            <param name="PosVar">Object containg values to write</param>
        </member>
        <member name="M:MotocomdotNetWrapper.CYasnac.WriteSimpleTypeVariable(MotocomdotNetWrapper.CSimpleTypeVarList)">
            <summary>
            Writes multiple simple type variables
            </summary>
            <param name="SimpleVar"></param>
        </member>
        <member name="M:MotocomdotNetWrapper.CYasnac.ReadFile(System.String,System.String)">
            <summary>
            Download a file from controller
            </summary>
            <param name="Filetitle">Name of the file</param>
            <param name="Path">Folder to store the file</param>
        </member>
        <member name="M:MotocomdotNetWrapper.CYasnac.ReadFile(System.String)">
            <summary>
            Reads file and stores it to default folder
            </summary>
            <param name="Filetitle">Filename</param>
        </member>
        <member name="M:MotocomdotNetWrapper.CYasnac.WriteSingleIO(System.Int32,System.Boolean)">
            <summary>
            Writes one single IO
            </summary>
            <param name="Address">Address of IO</param>
            <param name="value">Value of IO</param>
        </member>
        <member name="M:MotocomdotNetWrapper.CYasnac.ReadIOGroups(System.Int32,System.Int16)">
            <summary>
            Reads multiple IO groups
            </summary>
            <param name="StartAddress">Address  of first group</param>
            <param name="NumberOfGroups">Number of groups to read</param>
            <returns>Array of binary codes representing each group</returns>
        </member>
        <member name="M:MotocomdotNetWrapper.CYasnac.WriteIOGroups(System.Int32,System.Int16,System.Int16[])">
            <summary>
            Writes multiple IO groups
            </summary>
            <param name="StartAddress">Address  of first group</param>
            <param name="NumberOfGroups">Number of groups to write</param>
            <param name="IOGroupValues">Values of each group</param>
        </member>
        <member name="M:MotocomdotNetWrapper.CYasnac.ReadSingleIO(System.Int32)">
            <summary>
            Reads one single IO
            </summary>
            <param name="Address">Address of IO to read</param>
            <returns>IO status</returns>
        </member>
        <member name="M:MotocomdotNetWrapper.CYasnac.WriteFile(System.String)">
            <summary>
            Uploads file to the controller
            </summary>
            <param name="Filename">Filename including path</param>
        </member>
        <member name="M:MotocomdotNetWrapper.CYasnac.StartJob(System.String)">
            <summary>
            Calls and executes specified jon
            </summary>
            <param name="JobName">Jobname to execute</param>
        </member>
        <member name="M:MotocomdotNetWrapper.CYasnac.GetCurrentJob">
            <summary>
            Returns executing job of task 0
            </summary>
            <returns>Jobname</returns>
        </member>
        <member name="M:MotocomdotNetWrapper.CYasnac.GetCurrentJob(System.Int16)">
            <summary>
            Returns executing job of specified task
            </summary>
            <param name="TaskID">Task ID</param>
            <returns>Jobname</returns>
        </member>
        <member name="M:MotocomdotNetWrapper.CYasnac.SetCurrentJob(System.Int16,System.String,System.Int16)">
            <summary>
            Sets executing job and cursor
            </summary>
            <param name="TaskID">Task ID</param>
            <param name="JobName">Jobname</param>
            <param name="linenumber">Line number</param>
        </member>
        <member name="M:MotocomdotNetWrapper.CYasnac.GetCurrentLine(System.Int16)">
            <summary>
            Returns current job line of specified task
            </summary>
            <param name="TaskID">Task ID</param>
            <returns>Job line number</returns>
        </member>
    </members>
</doc>
